单例对象（Singleton）是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，
该对象只有一个实例存在。这样的模式有几个好处：

1、某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。

2、省去了new操作符，降低了系统内存的使用频率，减轻GC压力。

3、有些类如交易所的核心交易引擎，控制着交易流程，如果该类可以创建多个的话，系统完全乱了。
（比如一个军队出现了多个司令员同时指挥，肯定会乱成一团），
所以只有使用单例模式，才能保证核心交易服务器独立控制整个流程。

使用场景：
连接池（数据源、HTTP）

6种实现方法

序号		单例模式实现方法					线程是否安全
1		普通懒汉式						不安全
2		类对象锁――懒汉式（对外、创建为同一方法）	安全，但性能底
3		饿汉式							安全，无论是否使用度加载
4		静态内部类――懒汉式				安全，内部类虽是饿汉式编码风格，其实是延迟加载的懒汉式
5		枚举方法――不存在类实例化			安全，神的写法
6		双重校验――懒汉式（对外、创建不同方法）	安全，都校验是否对象为null,只创建方法加类对象锁
7		静态代码块――饿汉式				安全
