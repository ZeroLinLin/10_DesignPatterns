设计模式（Design Patterns）	―――― 可复用面向对象软件的基础
设计模式是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验总结。
使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。
设计模式是软件工程的基石。

一、设计模式的分类
总体来说分为三类：
1、创建型模式，共5种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式；
2、结构型模式，共7种：适配器模式、装饰模式、代理模式、外观模式、桥接模式、组合模式、享元模式；
3、行为型模式，共11种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、访问者模式、中介模式、解释器模式

其实还有两类：并发型模式和线程池模式。

二、设计模式的六大原则
1、开闭原则（Open Close Principle）
	对扩展开放，对修改关闭。
	在程序需要进行拓展的时候，不能去修改原有代码，实现一个热拔插的效果。为了使程序的扩展性好，易于维护和升级，需要使用到接口和抽象类。

2、里氏代换原则（Liskov Substitution Principle）
	里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。
	LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不收到影响时，基类才能真正被复用，而衍生类也能够在基类基础上增加新的行为。
	LSP是对“开闭原则”的补充。实现“开闭原则”的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以LSP是对实现抽象化的具体步骤的规范。
	
3、依赖倒转原则（Dependence Inversion Principle）
	这个是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。
	
4、接口隔离原则（Interface Segregation Principle）
	原则思想：使用多个隔离的接口，比使用单个接口要好。
	还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。
	所以上文中多次出现：降低依赖，降低耦合。
	
5、迪米特法原则（最少知道原则）（Demeter Principle）
	为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他的实体之间发生相互作用，使得系统功能模块相对独立。
	
6、合成复用原则（Composite Reuse Pinciple）
	尽量使用合成/聚合的方式，而不是使用继承。

